##############################################################################
WIREDOC 2.0
xmlns:wd="http://www.wiredoc.org/ns/wiredoc/2.0"
##############################################################################

Mathieu Bouchard

================================
component
================================

Definition of a component.  wd:name attribute is optional as but will be automatically determined based on the folder and filename where this component resides (only if omitted).

<wd:component [wd:name="[NAME/SPACE.INSTANCE]">
	...
</wd:component>

Note: wd:name attribute can usually be omitted where the application implementation is smart enough to construct it based on folder structure.

================================
reference
================================

Reference another component, which the application is responsible for merging.

1) First flavour, self-closing.

<wd:reference [wd:name="[NAME/SPACE.INSTANCE]"] />

2) Second flavour, where the component being referenced will insert the child nodes in this scope where it finds a wd:parent-children.

<wd:reference [wd:name="[NAME/SPACE.INSTANCE]"]>
	...
</wd:reference>

--------------------------------

Reference to the parent's children nodes in the case where a reference:component has child nodes inside.

<wd:parent-children />

================================
container
================================

A general placeholder that has semantic meaning.

<wd:container [wd:name="[SEMANTIC-MEANING-OF-WHAT-THE-CONTAINER-REPRESENTS-OR-HOLDS]"]>
	...
</wd:container>

================================
group
================================

A general placeholder that has semantic meaning to describe its child containers.  Useful when the containers are related to one another.

<wd:group [wd:name="[SEMANTIC-MEANING-OF-THE-CONTAINERS-WITHIN]"]>
	<wd:container />
	<wd:container />
	<wd:container />
</group:*>

================================
navigation
================================

Identical to the group namespace except that it adds a form of hard-coded semantic meaning, i.e. a group that is absolutely navigation

<wd:navigation [wd:name="[SEMANTIC-MEANING-OF-THE-CONTAINERS-WITHIN]"]>
	<wd:container />
	<wd:container />
	<wd:container />
</wd:navigation>

================================
doc
================================

The doc namespace is an almost faithful representation of Simplified DocBook. A good portion of the tags have been implemented with more to come.
Examples:

<doc:title [wd:name="[SEMANTIC-MEANING]"] />
<doc:para [wd:name="[SEMANTIC-MEANING]"] />
<doc:strong [wd:name="[SEMANTIC-MEANING]"] />
<doc:emphasis [wd:name="[SEMANTIC-MEANING]"] />
<doc:heading [wd:name="[SEMANTIC-MEANING]"] />
...

There are some convenience tags that aren't part of DocBook but added for now:
<doc:heading1 /> through to <doc:heading6 />
<doc:span />

================================
navigate
================================

Navigation to somewhere else

<wd:navigate [wd:name="[SEMANTIC-MEANING]"] />

Hint: WireKit XHTML 1.0 uses the href="[URL]" and target="[WINDOW]" attributes.

================================
action
================================

Button action

<wd:action [wd:handle="[HANDLE NAME]"] [wd:name="[SEMANTIC-MEANING]"] />

================================
form
================================

<wd:form [wd:name="[SEMANTIC-MEANING-OF-THE-FORM]"] href="[ACTION]" [method="[ACTION]"] [enctype="[ENCTYPE]"]>
	<wd:fieldset>
		<wd:legend />

		<wd:field type="select|multi-select|radio|checkbox">
			<wd:group>
				<wd:option>
					<wd:label />
					<wd:value />
				</wd:option>
			</wd:group>
		</wd:field>

		<wd:field type="text|textarea|password|submit|reset|button" name="[NAME]">
			<wd:label />
			<wd:value />
			<wd:info />
			<wd:constraint type="regexp|match|match-field|match-field-md5|selected-count|range" against="[AGAINST]" min="[MIN]" max="[MAX]">
				<wd:message type="pass" />
				<wd:message type="fail" />
			</wd:constraint>
		</wd:field>
	</wd:fieldset>
</wd:form>

##############################################################################
METADOC 1.0
xmlns:meta="http://www.wiredoc.org/ns/metadoc/1.0"
##############################################################################

Metadoc doesn't care what the element names are, they are reserved for the application to handle.

<meta:* />

Examples in use for WireKit in XHTML 1.0:
<meta:title-glue />
<meta:title-sort-order />
<meta:href />				Value specified is handled by application, in WireKit refers to the URL associated with this component.
<meta:parent />				Value specified is a fully qualified name, which relates two components together in a parent-child relationship.
<meta:script [*]>...</meta:script>
<meta:link [*] />
<meta:meta [*] />
<meta:style [*] />
<meta:view />				Value specified indicates which XSL view should be used to process the finalized WireDoc XML document. Defaults to "xMVC\Mod\WireKit\xhtml1-strict".

Example usage of meta:href
<meta:href xml:lang="en">/about/</meta:href>
<meta:href xml:lang="fr">/a-propos/</meta:href>

The following are example attributes also used for WireKit in XHTML 1.0:

meta:inject-href			Value specified is a fully qualified name (component name and instance-name), such as "Inside/Article.aboutUs", result is replacing this attribute with "href" and the value being what is found in meta:href of that component instance.  Blank value means the current component that meta:href is held.
meta:inject-href-prefix
meta:inject-href-suffix
meta:inject-href-lang		Force meta:inject-href to use the language value specified in meta:inject-href-lang when determining the URL. Otherwise meta:inject-href automatically detects the current language based on internal methods.
meta:inject-lang			Takes the value of meta:inject-lang and injects an attribute by that name, and its value is the current language
meta:inject-lang-base
meta:inject-lang-locale

Example of usage of inject:href:

<wd:navigate meta:inject-href="" meta:inject-href-suffix="?lang=en" meta:inject-href-lang="en" xml:lang="fr">English</wd:navigate>
<wd:navigate meta:inject-href="" meta:inject-href-suffix="?lang=fr" meta:inject-href-lang="fr" xml:lang="en">Fran√ßais</wd:navigate>

--------------------------------

NOTES:

1) In general, an id attribute can be added to any node.
2) In general, any attribute can have wd:name added to give it semantic meaning (consider renaming wd:name to perhaps wd:meaning?)
3) Short-hand syntax is available for all wiredoc namespaced nodes except wd:component, wd:reference and children of wd:form
	Example:
	Full syntax: <wd:container wd:name="test" />
	Shorthand syntax: <wd:container.test />