WIREDOC 1.0 CHEATSHEET
Mathieu Bouchard

================================
component
================================

Definition of a component.  Name/instance-name attributes not necessary as these are derived from the folder and filename where this component resides.

<component:definition>
	...
</component:definition>

================================
reference
================================

Reference another component, which the application is responsible for merging.

1) First flavour, self-closing.

<reference:component name="[NAMESPACE]" instance-name="[INSTANCE]" />

2) Second flavour, where the component being referenced will insert the child nodes in this scope where it finds a reference:parent-children.

<reference:component name="[NAMESPACE]" instance-name="[INSTANCE]">
	...
</reference:component>

--------------------------------

Reference to the parent's children nodes in the case where a reference:component has child nodes inside.

<reference:parent-children />

================================
inject
================================

The following are attributes that the application is responsible for handling. (Consider making this part of the meta namespace)

inject:href		Value specified is a fully qualified name (component name and instance-name), such as "Inside\Article\aboutUs", result is replacing this attribute with "href" and the value being what is found in meta:href of that component instance.  Blank value means the current component that meta:href is held.
inject:href-prefix
inject:href-suffix
inject:href-lang	Force inject:href to use the language value specified in inject:href-lang when determining the URL. Otherwise inject:href automatically detects the current language based on internal methods.
inject:lang		Takes the value of inject:lang and injects an attribute by that name, and its value is the current language

Example of usage of inject:href:

<interact:navigate inject:href="" inject:href-suffix="?lang=en" inject:href-lang="en" xml:lang="fr">English</interact:navigate>
<interact:navigate inject:href="" inject:href-suffix="?lang=fr" inject:href-lang="fr" xml:lang="en">Fran√ßais</interact:navigate>

================================
meta
================================

Wiredoc doesn't care what these are, they are reserved for the application to handle.

<meta:* />

Examples in use for WireKit in XHTML 1.0:
meta:title
meta:href
meta:parent		Value specified is a fully qualified name, which relates two components together in a parent-child relationship.
meta:script
meta:link

Example usage of meta:href
<meta:href xml:lang="en">/about/</meta:href>
<meta:href xml:lang="fr">/a-propos/</meta:href>

================================
container
================================

A general placeholder that has semantic meaning.

<container:[SEMANTIC-MEANING-OF-WHAT-THE-CONTAINER-REPRESENTS-OR-HOLDS]>
	...
</container>

================================
group
================================

A general placeholder that has semantic meaning to describe its child containers.  Useful when the containers are related to one another.

<group:[SEMANTIC-MEANING-OF-THE-CONTAINERS-WITHIN]>
	<container:* />
	<container:* />
	<container:* />
</group:*>

================================
nav
================================

Identical to the group namespace except that it adds a form of hard-coded semantic meaning, i.e. a group that is absolutely navigation

<nav:[SEMANTIC-MEANING-OF-THE-CONTAINERS-WITHIN]>
	<container:* />
	<container:* />
	<container:* />
</nav:*>

================================
doc
================================

The doc namespace is an almost faithful representation of Simplified DocBook. A good portion of the tags have been implemented with more to come.
Examples:

<doc:para />
<doc:strong />
<doc:emphasis />
<doc:heading />
...

There are some convenience tags that aren't part of DocBook but added for now:
<doc:heading1 /> through to <doc:heading6 />
<doc:span />

================================
interact
================================

Any interactive (action-reaction) elements are defined using this namespace.  Currently there are two:

<interact:navigate href="[URL]" target="[WINDOW]" />
<interact:action handle="[HANDLE NAME]" />

================================
form
================================

<form:form method="[ACTION]" href="[ACTION]" enctype="[ENCTYPE]">
	<form:fieldset>
		<form:legend />

		<form:field type="select|multi-select|radio|checkbox">
			<form:group>
				<form:option>
					<form:label />
					<form:value />
				</form:option>
			</form:group>
		</form:field>

		<form:field type="text|textarea|password|submit|reset|button" name="[NAME]">
			<form:label />
			<form:value />
			<form:info />
			<form:constraint type="regexp|match|match-field|match-field-md5|selected-count|range" against="[AGAINST]" min="[MIN]" max="[MAX]">
				<form:message type="pass" />
				<form:message type="fail" />
			</form:constraint>
		</form:field>
	</form:fieldset>
</form:form>

--------------------------------

NOTES:

1) In general, naming your node the same as its namespace allows it to be anonymous. Example:
<container:container />
<group:group />
<nav:nav />

2) In general, an id attribute can be added to any node.